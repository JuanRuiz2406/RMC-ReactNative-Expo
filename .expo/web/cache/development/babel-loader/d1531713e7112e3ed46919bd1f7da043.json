{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Front-End-RMC-Expo\\\\components\\\\carousel\\\\donutChart.js\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Svg, { G, Circle } from \"react-native-svg\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar AnimatedInput = Animated.createAnimatedComponent(TextInput);\nexport default function Donut(_ref) {\n  var _ref$percentage = _ref.percentage,\n      percentage = _ref$percentage === void 0 ? 75 : _ref$percentage,\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 40 : _ref$radius,\n      _ref$strokeWidth = _ref.strokeWidth,\n      strokeWidth = _ref$strokeWidth === void 0 ? 10 : _ref$strokeWidth,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 500 : _ref$duration,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"tomato\" : _ref$color,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 500 : _ref$delay,\n      textColor = _ref.textColor,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      _ref$texto = _ref.texto,\n      texto = _ref$texto === void 0 ? \"Casos Atendidos\" : _ref$texto;\n  var animatedValue = React.useRef(new Animated.Value(0)).current;\n  var halfCircle = radius + strokeWidth;\n  var circleCircumference = 2 * Math.PI * radius;\n  var circleRef = React.useRef();\n  var inputRef = React.useRef();\n\n  var Animation = function Animation(toValue) {\n    return Animated.timing(animatedValue, {\n      toValue: toValue,\n      duration: duration,\n      delay: delay,\n      useNativeDriver: true\n    }).start(function () {\n      Animation(toValue === 0 ? percentage : 0);\n    });\n  };\n\n  React.useEffect(function () {\n    Animation(percentage);\n    animatedValue.addListener(function (v) {\n      if (circleRef == null ? void 0 : circleRef.current) {\n        var maxPerc = 100 * v.value / max;\n        var strokeDashoffset = circleCircumference - circleCircumference * maxPerc / 100;\n        circleRef.current.setNativeProps({\n          strokeDashoffset: strokeDashoffset\n        });\n      }\n\n      if (inputRef == null ? void 0 : inputRef.current) {\n        inputRef.current.setNativeProps({\n          text: \"\" + Math.round(v.value)\n        });\n      }\n    });\n    return function () {\n      animatedValue.removeAllListeners();\n    };\n  }, [max, percentage]);\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, React.createElement(Svg, {\n    width: radius * 2,\n    height: radius * 2,\n    viewBox: \"0 0 \" + halfCircle * 2 + \" \" + halfCircle * 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, React.createElement(G, {\n    rotation: \"-90\",\n    origin: halfCircle + \", \" + halfCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, React.createElement(Circle, {\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: color,\n    strokeWidth: strokeWidth,\n    r: radius,\n    fill: \"transparent\",\n    strokeOpacity: 0.2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), React.createElement(AnimatedCircle, {\n    ref: circleRef,\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: color,\n    strokeWidth: strokeWidth,\n    r: radius,\n    fill: \"transparent\",\n    strokeDasharray: circleCircumference,\n    startOffset: circleCircumference / 2,\n    strokeLinecap: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }))), React.createElement(TextInput, {\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    editable: false,\n    defaultValue: \"0\",\n    style: [StyleSheet.absoluteFillObject, {\n      fontSize: radius / 2,\n      color: textColor != null ? textColor : color\n    }, {\n      fontWeight: \"900\",\n      textAlign: \"center\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontWeight: \"bold\",\n      textDecorationLine: \"none\",\n      textAlign: \"center\",\n      fontSize: 20,\n      lineHeight: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, texto));\n}","map":{"version":3,"sources":["C:/xampp/htdocs/Front-End-RMC-Expo/components/carousel/donutChart.js"],"names":["React","Svg","G","Circle","AnimatedCircle","Animated","createAnimatedComponent","AnimatedInput","TextInput","Donut","percentage","radius","strokeWidth","duration","color","delay","textColor","max","texto","animatedValue","useRef","Value","current","halfCircle","circleCircumference","Math","PI","circleRef","inputRef","Animation","toValue","timing","useNativeDriver","start","useEffect","addListener","v","maxPerc","value","strokeDashoffset","setNativeProps","text","round","removeAllListeners","StyleSheet","absoluteFillObject","fontSize","fontWeight","textAlign","textDecorationLine","lineHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { View, Text, Animated, TextInput, StyleSheet } from \"react-native\";\r\nimport Svg, { G, Circle } from \"react-native-svg\";\r\n\r\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\r\nconst AnimatedInput = Animated.createAnimatedComponent(TextInput);\r\n\r\nexport default function Donut({\r\n  percentage = 75,\r\n  radius = 40,\r\n  strokeWidth = 10,\r\n  duration = 500,\r\n  color = \"tomato\",\r\n  delay = 500,\r\n  textColor,\r\n  max = 100,\r\n  texto = \"Casos Atendidos\",\r\n}) {\r\n  const animatedValue = React.useRef(new Animated.Value(0)).current;\r\n  const halfCircle = radius + strokeWidth;\r\n  const circleCircumference = 2 * Math.PI * radius;\r\n  const circleRef = React.useRef();\r\n  const inputRef = React.useRef();\r\n\r\n  const Animation = (toValue) => {\r\n    return Animated.timing(animatedValue, {\r\n      toValue,\r\n      duration,\r\n      delay,\r\n      useNativeDriver: true,\r\n    }).start(() => {\r\n      Animation(toValue === 0 ? percentage : 0);\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    Animation(percentage);\r\n\r\n    animatedValue.addListener((v) => {\r\n      if (circleRef?.current) {\r\n        const maxPerc = (100 * v.value) / max;\r\n        const strokeDashoffset =\r\n          circleCircumference - (circleCircumference * maxPerc) / 100;\r\n        circleRef.current.setNativeProps({\r\n          strokeDashoffset,\r\n        });\r\n      }\r\n\r\n      if (inputRef?.current) {\r\n        inputRef.current.setNativeProps({\r\n          text: `${Math.round(v.value)}`,\r\n        });\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      animatedValue.removeAllListeners();\r\n    };\r\n  }, [max, percentage]);\r\n  return (\r\n    <View>\r\n      <Svg\r\n        width={radius * 2}\r\n        height={radius * 2}\r\n        viewBox={`0 0 ${halfCircle * 2} ${halfCircle * 2}`}\r\n      >\r\n        <G rotation=\"-90\" origin={`${halfCircle}, ${halfCircle}`}>\r\n          <Circle\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            stroke={color}\r\n            strokeWidth={strokeWidth}\r\n            r={radius}\r\n            fill=\"transparent\"\r\n            strokeOpacity={0.2}\r\n          />\r\n          <AnimatedCircle\r\n            ref={circleRef}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            stroke={color}\r\n            strokeWidth={strokeWidth}\r\n            r={radius}\r\n            fill=\"transparent\"\r\n            strokeDasharray={circleCircumference}\r\n            startOffset={circleCircumference / 2}\r\n            strokeLinecap=\"round\"\r\n          />\r\n        </G>\r\n      </Svg>\r\n      <TextInput\r\n        ref={inputRef}\r\n        underlineColorAndroid=\"transparent\"\r\n        editable={false}\r\n        defaultValue=\"0\"\r\n        style={[\r\n          StyleSheet.absoluteFillObject,\r\n          { fontSize: radius / 2, color: textColor ?? color },\r\n          { fontWeight: \"900\", textAlign: \"center\" },\r\n        ]}\r\n      />\r\n      <Text\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          textDecorationLine: \"none\",\r\n          textAlign: \"center\",\r\n          fontSize: 20,\r\n          lineHeight: 40,\r\n        }}\r\n      >\r\n        {texto}\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\n/*const styles = StyleSheet.create({\r\n    container: {\r\n        backgroundColor: 'transparent',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-evenly',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n    },\r\n});*/\r\n"]},"metadata":{},"sourceType":"module"}