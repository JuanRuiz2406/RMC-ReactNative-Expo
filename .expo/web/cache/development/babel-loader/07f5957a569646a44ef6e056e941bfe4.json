{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\RMC\\\\Front-End-RMC-Expo-v2\\\\components\\\\donutChart.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Svg, { G, Circle } from 'react-native-svg';\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar AnimatedInput = Animated.createAnimatedComponent(TextInput);\nexport default function Donut(_ref) {\n  var _ref$percentage = _ref.percentage,\n      percentage = _ref$percentage === void 0 ? 75 : _ref$percentage,\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 40 : _ref$radius,\n      _ref$strokeWidth = _ref.strokeWidth,\n      strokeWidth = _ref$strokeWidth === void 0 ? 10 : _ref$strokeWidth,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 500 : _ref$duration,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'tomato' : _ref$color,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 500 : _ref$delay,\n      textColor = _ref.textColor,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      _ref$texto = _ref.texto,\n      texto = _ref$texto === void 0 ? 'Casos Atendidos' : _ref$texto;\n  var animatedValue = React.useRef(new Animated.Value(0)).current;\n  var halfCircle = radius + strokeWidth;\n  var circleCircumference = 2 * Math.PI * radius;\n  var circleRef = React.useRef();\n  var inputRef = React.useRef();\n\n  var Animation = function Animation(toValue) {\n    return Animated.timing(animatedValue, {\n      toValue: toValue,\n      duration: duration,\n      delay: delay,\n      useNativeDriver: true\n    }).start(function () {\n      Animation(toValue === 0 ? percentage : 0);\n    });\n  };\n\n  React.useEffect(function () {\n    Animation(percentage);\n    animatedValue.addListener(function (v) {\n      if (circleRef == null ? void 0 : circleRef.current) {\n        var maxPerc = 100 * v.value / max;\n        var strokeDashoffset = circleCircumference - circleCircumference * maxPerc / 100;\n        circleRef.current.setNativeProps({\n          strokeDashoffset: strokeDashoffset\n        });\n      }\n\n      if (inputRef == null ? void 0 : inputRef.current) {\n        inputRef.current.setNativeProps({\n          text: \"\" + Math.round(v.value)\n        });\n      }\n    });\n    return function () {\n      animatedValue.removeAllListeners();\n    };\n  }, [max, percentage]);\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, React.createElement(Svg, {\n    width: radius * 2,\n    height: radius * 2,\n    viewBox: \"0 0 \" + halfCircle * 2 + \" \" + halfCircle * 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, React.createElement(G, {\n    rotation: \"-90\",\n    origin: halfCircle + \", \" + halfCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, React.createElement(Circle, {\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: color,\n    strokeWidth: strokeWidth,\n    r: radius,\n    fill: \"transparent\",\n    strokeOpacity: 0.2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }), React.createElement(AnimatedCircle, {\n    ref: circleRef,\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: color,\n    strokeWidth: strokeWidth,\n    r: radius,\n    fill: \"transparent\",\n    strokeDasharray: circleCircumference,\n    startOffset: circleCircumference / 2,\n    strokeLinecap: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }))), React.createElement(TextInput, {\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    editable: false,\n    defaultValue: \"0\",\n    style: [StyleSheet.absoluteFillObject, {\n      fontSize: radius / 2,\n      color: textColor != null ? textColor : color\n    }, {\n      fontWeight: '900',\n      textAlign: 'center'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      textDecorationLine: 'none',\n      textAlign: 'center',\n      fontSize: 20,\n      lineHeight: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, texto));\n}","map":{"version":3,"sources":["D:/xampp/htdocs/RMC/Front-End-RMC-Expo-v2/components/donutChart.js"],"names":["React","Svg","G","Circle","AnimatedCircle","Animated","createAnimatedComponent","AnimatedInput","TextInput","Donut","percentage","radius","strokeWidth","duration","color","delay","textColor","max","texto","animatedValue","useRef","Value","current","halfCircle","circleCircumference","Math","PI","circleRef","inputRef","Animation","toValue","timing","useNativeDriver","start","useEffect","addListener","v","maxPerc","value","strokeDashoffset","setNativeProps","text","round","removeAllListeners","StyleSheet","absoluteFillObject","fontSize","fontWeight","textAlign","textDecorationLine","lineHeight"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { View, Text, Animated, TextInput, StyleSheet } from 'react-native'\r\nimport Svg, { G, Circle } from 'react-native-svg'\r\n\r\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\r\nconst AnimatedInput = Animated.createAnimatedComponent(TextInput);\r\n\r\nexport default function Donut({\r\n    percentage = 75,\r\n    radius = 40,\r\n    strokeWidth = 10,\r\n    duration = 500,\r\n    color = 'tomato',\r\n    delay = 500,\r\n    textColor,\r\n    max = 100,\r\n    texto = 'Casos Atendidos',\r\n}) {\r\n    const animatedValue = React.useRef(new Animated.Value(0)).current\r\n    const halfCircle = radius + strokeWidth\r\n    const circleCircumference = 2 * Math.PI * radius\r\n    const circleRef = React.useRef()\r\n    const inputRef = React.useRef()\r\n\r\n    const Animation = (toValue) => {\r\n        return Animated.timing(animatedValue, {\r\n            toValue,\r\n            duration,\r\n            delay,\r\n            useNativeDriver: true,\r\n        }).start(() => {\r\n            Animation(toValue === 0 ? percentage : 0)\r\n        });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        Animation(percentage)\r\n\r\n        animatedValue.addListener((v) => {\r\n            if (circleRef?.current) {\r\n                const maxPerc = (100 * v.value) / max\r\n                const strokeDashoffset = circleCircumference - (circleCircumference * maxPerc) / 100\r\n                circleRef.current.setNativeProps({\r\n                    strokeDashoffset,\r\n                });\r\n            }\r\n\r\n            if (inputRef?.current) {\r\n                inputRef.current.setNativeProps({\r\n                    text: `${Math.round(v.value)}`,\r\n                })\r\n            }\r\n        });\r\n\r\n\r\n        return () => {\r\n            animatedValue.removeAllListeners();\r\n        };\r\n    }, [max, percentage]);\r\n    return (\r\n        <View>\r\n            <Svg width={radius * 2} height={radius * 2} viewBox={`0 0 ${halfCircle * 2} ${halfCircle * 2}`} >\r\n                <G rotation='-90' origin={`${halfCircle}, ${halfCircle}`}>\r\n                    <Circle\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        stroke={color}\r\n                        strokeWidth={strokeWidth}\r\n                        r={radius}\r\n                        fill=\"transparent\"\r\n                        strokeOpacity={0.2}\r\n                    />\r\n                    <AnimatedCircle\r\n                        ref={circleRef}\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        stroke={color}\r\n                        strokeWidth={strokeWidth}\r\n                        r={radius}\r\n                        fill=\"transparent\"\r\n                        strokeDasharray={circleCircumference}\r\n                        startOffset={circleCircumference / 2}\r\n                        strokeLinecap='round'\r\n                    />\r\n                </G>\r\n            </Svg>\r\n            <TextInput\r\n                ref={inputRef}\r\n                underlineColorAndroid=\"transparent\"\r\n                editable={false}\r\n                defaultValue='0'\r\n                style={\r\n                    [\r\n                        StyleSheet.absoluteFillObject,\r\n                        { fontSize: radius / 2, color: textColor ?? color },\r\n                        { fontWeight: '900', textAlign: 'center' },\r\n                    ]\r\n                }\r\n            />\r\n            <Text\r\n                style={\r\n                    { fontWeight: 'bold', textDecorationLine: 'none', textAlign: 'center', fontSize: 20, lineHeight: 40 }\r\n                }\r\n            >{texto}</Text>\r\n        </View>\r\n    );\r\n}\r\n\r\n/*const styles = StyleSheet.create({\r\n    container: {\r\n        backgroundColor: 'transparent',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-evenly',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n    },\r\n});*/"]},"metadata":{},"sourceType":"module"}